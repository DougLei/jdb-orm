<?xml version="1.0" encoding="UTF-8"?>
<configuration id="default">
	<environment>
		<!-- <property name="dialect" value="mysql" /> --><!-- value的值包括: mysql, oracle, sqlserver -->
		<!-- <property name="enableSessionCache" value="true" /> --><!-- 是否开启Session缓存, 即对Statement缓存, 默认值为true  -->
		<!-- <property name="enableTableSessionCache" value="true" /> --><!-- 是否开启TableSession缓存, 即对表对象缓存, 默认值为true  -->
		<!-- <property name="mappingCacheStore" value="application" /> --><!-- value的值包括: application, 默认值为application -->
		<!-- <property name="tableCreateMode" value="none" /> --><!-- value的值包括: none, create, drop_create, dynamic_update, 没有默认值, 可以不配置, 该属性值为全局配置, 如果配置了该属性值, 则所有表映射的createMode属性配置失效 -->
		<!-- <property name="enableDataValidation" value="false" /> --><!-- 是否开启数据验证, 即对提交的数据的验证, 默认值为false  -->
		
		<!-- <property name="enableTableDynamicUpdate" value="false" /> --><!-- 是否开启表的动态更新, 默认值为false  -->
		<!-- <property name="serializationFileRootPath" value="" /> --><!-- 序列化文件的根路径, 配置的路径从磁盘根路径起, 如果不配置则使用操作系统中的用户目录, 即user.home -->
		<!-- <property name="enableColumnDynamicUpdateValidation" value="false" /> --><!-- 是否开启列的动态更新验证[列的动态更新验证含义为, 修改列的数据类型,长度,精度,是否可为空时, 判断是否可以进行修改, 如果不能修改, 则抛出相应的异常信息], 默认值为false  -->
		
		<!-- 可以远程操作指定的数据库服务, 进行数据库的create/drop -->
		<remoteDatabase>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
			<property name="destroy" value="true"/><!-- destroy如果为true, 在销毁数据源的时候, 也会drop数据库 -->
			
			<!-- 
				create的sql语句和drop的sql语句反向对应 
				例如 create第一个sql语句是create database, drop最后一个sql语句应该是drop database
				框架会按照顺序执行create/drop database
				
				创建时先创建数据库, 再创建用户
				删除时与创建相反, 先删除用户, 再删除数据库
			-->
			<createSql>
				<sql><!-- create database xxx --></sql>
				<sql><!-- create user xxx --></sql>
			</createSql>
			<dropSql>
				<sql><!-- drop user xxx --></sql>
				<sql><!-- drop database xxx --></sql>
			</dropSql>
		</remoteDatabase>
		
		<datasource class="com.alibaba.druid.pool.DruidDataSource" closeMethod="">
			<property name="driverClassName" value="${jdbc.driver.class}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
		
			<property name="maxActive" value="500" /> 
			<property name="minIdle" value="2" /> 
			<property name="maxWait" value="5000" /> 
			<property name="timeBetweenEvictionRunsMillis" value="60000" /> 
			<property name="poolPreparedStatements" value="true" /> 
			<property name="maxPoolPreparedStatementPerConnectionSize" value="100" />
		</datasource>
		
		<mappings searchJar="false"><!-- 是否扫描所有, 即是否扫描jar包中的配置 -->
			<mapping path="mappings/sql/sql.smp.xml" />
			<mapping path="mappings/table" />
		</mappings>
	</environment>
	
	<properties placeholderPrefix="${" placeholderSuffix="}">
		<resource path="jdbc.properties" />
	</properties>
	
	<extConfiguration>
		<datatypeHandlers>
			<datatypeHandler dialect="" class="" /><!-- dialect如果不填, 就用[property dialect]的值 -->
		</datatypeHandlers>
	</extConfiguration>
</configuration>