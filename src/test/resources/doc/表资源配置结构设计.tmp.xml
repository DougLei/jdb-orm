<?xml version="1.0" encoding="UTF-8"?>
<mapping-configuration>
	<!-- 
		createMode的值包括: none, create, drop_create(可用来重置表), dynamic_update, 默认为create
		
		none模式下, 需要用户自己在数据库创建表, 这里映射文件只是起到一个映射的作用, 所以在此模式下, 无论对该映射执行add或delete操作, 都不会影响到数据库中对应的表
		
		代码逻辑上：
		如果一开始就使用的是dynamic_update模式, 后续可以改成任何模式值, 但是要注意的是, 不要通过drop_create的模式来修改表结构, 只能使用dynamic_update的模式来修改表结构
		如果一开始使用的不是dynamic_update模式, 后续就绝对不要使用dynamic_update模式, 这时就可以使用drop_create的模式来修改表结构
		
		jdb-orm框架配置中全局的tableCreateMode, 以及forceCreateMode同理
	-->
	<!-- forceCreateMode的值同createMode, 表示强制, 没有默认值, 可以不配置, 该值可覆盖全局的tableCreateMode -->
	<!-- 优先级: forceCreateMode 大于 tableCreateMode 大于 createMode -->
	<table name="SYS_USER" class="com.douglei.orm.session.SysUser" createMode="create" forceCreateMode="">
		<import-columns path=""/><!-- 从根路径查找, 要导入的列集合, 可以将所有表中的通用字段导入, 具体这个文件中怎么写, 看本文件最下面的注释内容 -->
		<columns>
			<!-- dataType的值包括: string, nstring, char, nchar, byte, short, integer, long, float, double, date, clob, blob, 默认值为string -->
			<!-- nullable默认值为true, validate默认值为false -->
			<column name="id" oldName="NANE" property="id" dataType="string" primaryKey="true" length="30" precision="" nullable="true" unique="" defaultValue="" check="" fkTableName="" fkColumnName="" validate="true" />
			<column oldName="NANE" descriptionName="姓名" property="name" dataType="string" length="30" validate="true" unique="true" />
			<column name="age" property="age" dataType="integer" />
			<column name="sex" property="sex" dataType="string" />
		</columns>

		<constraints>
			<!-- type = PRIMARY_KEY, UNIQUE, DEFAULT_VALUE(value), CHECK(expression), FOREIGN_KEY(fkTableName, fkColumnName) -->
			<constraint type="" value="" expression="" fkTableName="" fkColumnName="">
				<column name="" />
			</constraint>
		</constraints>
		
		<indexes>
			<index name="">
				<createSql dialect=""></createSql>
				<dropSql dialect=""></dropSql>
			</index>
		</indexes>
		
		<!-- 对主键的处理器, 如果不配置, 或不配置type均不起作用, type值包括: uuid32, uuid36, sequence, 或自定义的类(实现 {@link PrimaryKeyHandler} 接口), 并在这里配置实现类的全路径 -->
		<primaryKeyHandler type="sequence">
			<!-- 序列, 当上面的类型是sequence时, 该配置才生效 -->
			<!-- name序列名, 如果不指定, 则系统自动生成一个 -->
			<!-- 该序列会在表create时跟着create, 在表drop时跟着drop, 其余时候, 不会有任何处理 -->
			<!-- 主要针对oracle数据库, 可以自定义创建和删除序列的sql语句 -->
			<sequence name="">
				<createSql></createSql><!-- 如果不配置, 则使用系统默认的创建语句 -->
				<dropSql></dropSql><!-- 如果不配置, 则使用系统默认的删除语句 -->
			</sequence>
		</primaryKeyHandler>
		
		<!-- 验证器配置 -->
		<validators>
			<!-- name 列名 -->
			<!-- regex 正则表达式 -->
			<!-- notblank 不能为空字符串, 只要配置了该验证器, 则该列的值一定不能为空字符串, 和后面的true值无关系, 如果不需要验证则不要配置 -->
			<validator name="id" regex="{'express':'express是必须配置的, 其他可以选择配置','multiline':'','message':'','i18nCode':''}" notBlank="true" />
		</validators>
	</table>
</mapping-configuration>

<!-- 
	-- 导入列的文件配置内容
	
	<?xml version="1.0" encoding="UTF-8"?>
	<columns>
		<column name="id" property="id" dataType="integer" primaryKey="true" length="20" validate="true" />
				
		<column name="project_id" property="projectId" dataType="string" length="36" nullable="false" />
		<column name="table_index" property="tableIndex" dataType="short" length="3" nullable="false" />
		<column name="table_state" property="tableState" dataType="byte" length="1" nullable="false" />
		
		<column name="create_user_id" property="createUserId" dataType="string" length="36" nullable="false" />
		<column name="create_user_name" property="createUserName" dataType="nstring" length="50" nullable="false" />
		<column name="create_date" property="createDate" dataType="date" nullable="false" />
		
		<column name="destroy_user_id" property="destroyUserId" dataType="string" length="36" />
		<column name="destroy_user_name" property="destroyUserName" dataType="nstring" length="50" />
		<column name="destroy_date" property="destroyDate" dataType="date" />
	</columns>
 -->