<?xml version="1.0" encoding="UTF-8"?>
<configuration id="default">
	<environment>
		<!-- value的值包括: mysql, oracle, sqlserver, 如果不配置, 则框架会解析jdbc url, 获取对应的方言 -->
		<!-- <property name="dialect" value="mysql" /> -->
		<!-- 是否开启Statement缓存, 即对执行对象缓存, 默认值为true  -->
		<!-- <property name="enableStatementCache" value="true" /> -->
		<!-- 是否开启TableSession缓存, 即对表对象缓存, 默认值为false, 如果开启了表缓存, 在对表实例保存时, 只能在session提交后, 才能从表实例中获取自动生成的id值, 解决办法是自主生成id值存入表实例中再保存  -->
		<!-- <property name="enableTableSessionCache" value="false" /> -->
		
		<!-- 是否在启动时清空映射存储器, 即清空所有映射数据, 默认值为true -->
		<!-- <property name="clearMappingStoreOnStart" value="true" /> -->
		
		<!-- 没有默认值, 可以不配置, 具体参考《表资源配置结构设计.tmp.xml》文件中的createMode属性描述, 该属性值为全局配置, 如果配置了该属性值, 则会覆盖所有表映射的createMode配置值 -->
		<!-- <property name="tableCreateMode" value="" /> -->
		<!-- 序列化文件的根路径, 配置的路径为绝对路径, 如果不配置则使用操作系统中的用户目录, 即user.home -->
		<!-- <property name="serializationFileRootPath" value="" /> -->
		<!-- 是否开启列的结构更新验证, 列的结构更新验证功能为, 修改列的数据类型,长度,精度,是否可为空时, 判断是否可以进行修改, 如果不能修改, 则抛出异常信息, 默认值为false  -->
		<!-- <property name="enableColumnStructUpdateValidate" value="false" /> -->
		
		<!-- 是否开启数据验证, 即是否对调用映射时传入的参数进行验证, 默认为false, 如果为true且验证失败, 则框架会抛出异常; 该配置不会影响数据验证接口(DataValidatorProcessor)提供的验证功能  -->
		<!-- <property name="enableDataValidate" value="false" /> -->
		
		<!-- sql语句中, 声明参数时的前缀, 默认为#{ -->
		<!-- <property name="sqlParameterPrefix" value="#{" /> -->
		<!-- sql语句中, 声明参数时的后缀, 默认为} -->
		<!-- <property name="sqlParameterSuffix" value="#" /> -->
		<!-- sql语句中, 参数中各个配置的分隔符, 默认为, -->
		<!-- <property name="sqlParameterSplit" value="," /> -->
		<!-- sql语句中, 参数defaultValue配置的处理器, 默认为com.douglei.orm.core.metadata.sql.DefaultValueHandler, 也可以继承com.douglei.orm.core.metadata.sql.DefaultValueHandler并重写其getDefaultValue()方法, 并在这里配置实现类的全路径即可; 注意, 实现类最好生成serialVersionUID值 -->
		<!-- <property name="sqlParameterDefaultValueHandler" value="com.douglei.orm.core.metadata.sql.DefaultValueHandlerImpl" /> -->
		
		<!-- 当查询结果为Map时, 列名的处理器, 默认为com.douglei.orm.core.sql.statement.entity.ColumnNameConverter, 也可以继承com.douglei.orm.core.sql.statement.entity.ColumnNameConverter并重写其convert()方法, 并在这里配置实现类的全路径即可 -->
		<!-- <property name="columnNameConverter" value="com.douglei.orm.core.metadata.sql.DefaultValueHandlerImpl" /> -->
		
		<datasource class="com.alibaba.druid.pool.DruidDataSource" closeMethod="">
			<property name="driverClassName" value="${jdbc.driver.class}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
		
			<property name="maxActive" value="500" /> 
			<property name="minIdle" value="2" /> 
			<property name="maxWait" value="5000" /> 
			<property name="timeBetweenEvictionRunsMillis" value="60000" /> 
			<property name="poolPreparedStatements" value="true" /> 
			<property name="maxPoolPreparedStatementPerConnectionSize" value="100" />
		</datasource>
		
		<mappings searchAll="false"><!-- 是否扫描所有, 包括扫描所有jar包中的数据, 默认值为false -->
			<mapping path="mappings/sql/sql.smp.xml" />
			<mapping path="mappings/table" />
		</mappings>
	</environment>
	
	<properties placeholderPrefix="${" placeholderSuffix="}">
		<resource path="jdbc.properties" decryptValue="true"/><!-- decryptValue标识是否对配置文件中的数据进行解密, 默认值为false  -->
	</properties>
</configuration>