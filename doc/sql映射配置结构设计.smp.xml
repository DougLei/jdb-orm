<?xml version="1.0" encoding="UTF-8"?>
<mapping-configuration>
	<!-- 映射的属性配置, 参考《table映射配置结构设计.tmp.xml》中的属性配置说明 -->
	<property order="0" supportCover="true" supportDelete="true" extend="" />
	
	<!-- 
		sql映射配置
		* namespace: 映射名
		* oldNamespace: 旧映射名; 如果配置, 框架会删除旧映射名的sql
	 -->
	<sql namespace="com.test" oldNamespace="">
		<!-- 
			可引用的sql内容配置; 只能通过include使用, 不能直接被框架调用; 可配置多组
			* name: sql名称, 文件内唯一
		 -->
		<sql-content name="rs">
			<!-- sql内容 -->
		</sql-content>
		
		<!-- 
			sql内容配置; 可配置多组
			* name: sql名称, 文件内唯一
			* type: sql类型, 必填; 可使用的值有: INSERT, DELETE, UPDATE, SELECT, DECLARE, PROCEDURE; 不区分大小写
			
			以下两个参数, 针对type=INSERT, 且插入的数据表为自增主键时生效; 其作用为: 调用该sql时会传入一个对象, 框架执行insert语句后可得到数据库生成的自增主键id值, 根据这两个配置, 框架会将生成的自增主键值, 赋给调用sql时传入的对象的属性中
			* key: 指定传入的对象中, 要接收自增主键值的属性名 
			* sequence: 如果是ORACLE数据库, 配置相应的序列名(即insert中写到的序列名)
		 --> 
		<content name="" type="insert" key="id" sequence="">
			
			<!-- 普通的sql语句 -->
			select * from sys_user 
			
			<!-- 动态追加sql语句 -->
			<!-- 
				条件标签
				* test: 配置ognl表达式, 如果满足条件则会追加if中的内容
			 -->
			<if test="">
			</if>
			
			<!-- where标签; 功能与mybatis的where标签相同 -->
			<where></where>
			
			<!-- set标签; 功能与mybatis的set标签相同 -->
			<set></set>
			
			<!-- trim标签; 功能与mybatis的trim标签相同 -->
			<trim prefix="" prefixOverride="" suffix="" suffixOverride=""></trim>
			
			<!-- switch标签; 功能与mybatis的choose标签相同 -->
			<switch>
				<if></if><!-- 功能与mybatis的when标签相同 -->
				<else></else><!-- 功能与mybatis的otherwise标签相同 -->
			</switch>
			
			<!-- 
				foreach标签; 功能与mybatis的foreach标签相同, 没有index属性
				* alias: 等同于mybatis foreach中的item
			 -->
			<foreach collection="userIds" alias="userId" open="where id in (" separator="," close=")"></foreach>
			
			<!-- 
				引用标签;
				* ref-name: 引用指定name的sql-content 
			-->
			<include ref-name="" />
			
			<!-- 
				sql参数配置; #{开头, }结尾, 中间用,分割, 第一个必须是参数名; 其中开头,结尾,分隔符都可以在《jdb-orm框架配置结构设计.conf.xml》中进行配置修改
				
				* 数据类型相关配置, 参考《table映射配置结构设计.tmp.xml》中的column配置; 若type=PROCEDURE时, 建议使用dbType
				* mode: 针对type=PROCEDURE时生效; in(输入参数), out(输出参数), inout(输入输出参数); 不区分大小写, 默认值为in
				* dbType:  ...; 当type=PROCEDURE时, 必须使用dbType, 不能使用dataType
				* dataType: ...
				* length: ...
				* precision: ...
				 
				* defaultValue: 参数默认值
				* nullable: 参数是否可为空
				
				* placeholder: 是否使用占位符, 默认为true
				* prefix: 非占位符时的前缀字符
				* suffix: 非占位符时的后缀字符
			 -->
			#{name, mode=in, dbType=DATE, dataType=string, length=30, precision=1, defaultValue=dv, nullable=true, placeholder=false, prefix=', suffix='}
		
		</content>
	
		<!-- 验证器配置, 参考《table映射配置结构设计.tmp.xml》中的验证器配置结构; 其中的name值由列名改为这里的参数名 -->
		<validators><validator name=" "></validator></validators>
	</sql>
</mapping-configuration>