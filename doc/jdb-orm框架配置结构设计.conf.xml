<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	框架的根配置
	* id: 唯一标识, 可理解框架SessionFactory的唯一标识; 可不配置, 框架自动生成UUID
 -->
<configuration id="default">
	<environment>
		<!-- 
			是否开启Statement缓存, 即对sql执行对象缓存, 默认值为true
		-->
		<property name="enableStatementCache" value="true" />
		
		<!-- 
			是否开启TableSession缓存, 即对表对象缓存, 默认值为false; 
			如果开启了表缓存, 在对表实例保存时, 只能在session提交后, 才能从表实例中获取自动生成的id值, 解决办法是自主生成id值存入表实例中再保存(不支持自增列的情况)
		 -->
		<property name="enableTableSessionCache" value="false" />
		
		<!-- 
			全局的映射创建模式; 可不配置, 没有默认值; 如果配置了, 则会覆盖所有映射中配置的createMode值(覆盖不了配置了strict=true的映射); 创建模式主要是解决对数据库对象的操作, 例如表, 存储过程, 视图等
			none: 不处理模式
			create: 创建模式; 如果没有就创建, 有就不处理
			drop_create: 删除再创建模式; 如果存在就先删除, 再创建, 否则就直接创建; 适合用于重置表
			dynamic: 动态模式; 会根据映射结构的变化, 去动态更新数据库对象的结构
		-->
		<property name="globalCreateMode" value="" />
		
		<!-- 
			数据源配置
			* class: 数据源类全路径
			* closeMethod: 数据源关闭方法名, 可不配置
		 -->
		<datasource class="com.alibaba.druid.pool.DruidDataSource" closeMethod="">
			<!-- 
				以下配置具体数据源中的属性和属性值; 框架会通过反射机制, 创建数据源实例, 并给属性赋值; 这里是用阿里的Druid数据源作为示例
			-->
			<property name="driverClassName" value="${jdbc.driver.class}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
		
			<property name="maxActive" value="500" /> 
			<property name="minIdle" value="2" /> 
			<property name="maxWait" value="5000" /> 
			<property name="timeBetweenEvictionRunsMillis" value="60000" /> 
			<property name="poolPreparedStatements" value="true" /> 
			<property name="maxPoolPreparedStatementPerConnectionSize" value="100" />
		</datasource>
		
		<!-- 
			mapping配置
			* enableProperty: 是否启用映射属性, 默认值为false; 属性是指在各种mapping文件中, 配置的<property>元素, 如果启用了, 框架会将这些信息也存入到容器中
			* enableTable: 是否启用表映射, 默认值为true
			* enableSql: 是否启用sql映射, 默认值为true
			* enableView: 是否启用视图映射, 默认值为false
			* enableProcedure: 是否启用存储过程映射, 默认值为false
			* enableQuerySql: 是否启用query-sql映射, 默认值为true
		-->
		<mapping enableProperty="" enableTable="" enableSql="" enableView="" enableProcedure="" enableQuerySql="">
			<!-- 
				内置的sql映射配置; enableSql=true时才会生效
				* parameterPrefix: 声明参数时的前缀, 默认为#{
				* parameterSuffix: 声明参数时的后缀, 默认为}
				* parameterSplit: 参数中各个配置的分隔符, 默认为,
				* parameterDefaultValueHandler: 参数默认值处理器, 默认为{com.douglei.orm.configuration.environment.mapping.SqlMappingParameterDefaultValueHandler}类; 也可继承并重写默认类, 这里配置新类的全路径即可
			-->
			<sql parameterPrefix="" parameterSuffix="" parameterSplit="" parameterDefaultValueHandler="" />
			
			<!-- 
				mapping注册器的配置; 可配置多组
				* class: 映射类型的类的全路径; 继承并实现MappingType, 即可扩展新的映射类型
			 -->
			<register class="" />
		
			<!-- 
				mapping扫描器的配置; 可配置多组
				* path: 要扫描的路径, 基于java resource; 可以是目录, 也可以具体到文件
				* scanAll: 是否扫描所有, 包括扫描所有jar包, 默认值为false
			 -->			
			<scanner path="mappings/sql/sql.smp.xml" scanAll="false"/>
		</mapping>
		
		<!-- 
			属性文件配置; 框架会扫描并加载属性文件中的配置信息, 用户可在当前配置文件中通过占位符使用配置文件中的值
			* placeholderPrefix: 占位符前缀; 默认为${
			* placeholderSuffix: 占位符后缀; 默认为}
		 -->
		<properties placeholderPrefix="${" placeholderSuffix="}">
			<!-- 
				具体要扫描的资源文件配置; 可配置多组
				* path: 要扫描的路径, 基于java resource; 可以是目录, 也可以具体到文件
				* decryptValue: 是否对配置文件中的数据进行解密, 默认值为false
			 -->
			<resource path="jdbc.properties" decryptValue="false"/>
		</properties>
	</environment>
</configuration>