<?xml version="1.0" encoding="UTF-8"?>
<mapping-configuration>
	<!-- 
		映射的属性配置
		* order: mapping的执行顺序, 默认为0; 其作用为, 在进行AddOrCover时, 值越小的先执行; 在进行Delete时, 值越大的先执行
		* supportCover: mapping是否支持被覆盖, 默认为true
		* supportDelete: mapping是否支持被删除, 默认为true
		* extend: mapping的扩展属性, 可由第三方扩展
	-->
	<property order="0" supportCover="true" supportDelete="true" extend="" />
	
	<!-- 
		表信息配置:
		* name: 表名, 建议使用全大写, 如果是小写, 框架会自动转成大写
		* oldName: 旧表名, 当createMode为dynamic模式时, 可配置旧表名, 框架会自动同步数据库中对应的表结构, 且同步后在下次启动框架时需要删除该配置, 否则框架仍会尝试同步进而抛出异常; 其他模式无效
		* class: 与表映射的类路径, 可不配置, 框架支持map形式的映射
		
		* createMode: 创建模式, 参考《jdb-orm框架配置结构设计.conf.xml》中globalCreateMode的配置; 默认值为create
		* strict: 是否强限制createMode, 默认值为false; 值为true时, 会覆盖globalCreateMode的配置
	 -->
	<table name="SYS_USER" oldName="" class="com.douglei.orm.session.SysUser" createMode="create" strict="false">
		<columns>
			<!-- 
				列信息配置:
				* name: 列名, 建议使用全大写, 如果是小写, 框架会自动转成大写
				* oldName: 旧列名, 当createMode为dynamic模式时, 可配置旧列名, 框架会自动同步数据库中对应的表结构, 且同步后在下次启动框架时需要删除该配置, 否则框架仍会尝试同步进而抛出异常; 其他模式无效
				* property: 列对应类的属性名, 当table配置了class时生效; 可不配置, 默认框架会将列名转换为属性名, 例如: USER_NAME => userName; 具体转换规则可查看类: NameConvertUtil
				
				* dbType: (数据库)数据类型; 目前支持的值有: 
				** SQLSERVER: VARCHAR, NVARCHAR, CHAR, NCHAR, SMALLINT, INT, BIGINT, DECIMAL, NUMERIC, DATE, DATETIME, TEXT, VARCHAR(MAX), VARBINARY(MAX)
				** ORACLE: VARCHAR2, NVARCHAR2, CHAR, NCHAR, NUMBER, DATE
				** MYSQL: VARCHAR, CHAR, SMALLINT, INT, BIGINT, DECIMAL, DATE, DATETIME, MEDIUMBLOB, MEDIUMTEXT
				* dataType: (映射)数据类型; 目前支持的值有: string, nstring, char, nchar, number, snumber, datetime, blob, clob	
				*
				** dbType和dataType互斥, dbType的优先级高于dataType; dbType没有默认值, dataType的默认值为string; 类型的配置值区分大小写
				*
				* length: 数据类型的长度
				* precision: 数据类型的精度
				*
				* nullable: 是否可为空, 默认为true
			 -->
			<column name="USER_NAME" oldName="" property="userName" dbType="DATE" dataType="string" length="30" precision="" nullable="true"/>
		</columns>

		<!-- 约束配置 -->
		<constraints>
			<!-- 
				具体约束配置:
				* name: 约束名, 建议使用全大写, 如果是小写, 框架会自动转成大写; 若不配置, 框架会自动生成; 如果自动生成的名称长度超长, 则只能手动设置name来解决
				* type: 约束类型, 目前支持的值有:
				* 
				** PRIMARY_KEY: 主键约束, 支持配置联合主键约束
				*** isAutoIncrement: 是否将主键设为自增列, 默认为false
				*** sequenceName: 针对ORACLE数据库, 需要序列名, 从sequenceName中获取序列的名称; 序列名的处理逻辑,  参考constraint的name属性; 创建序列和删除序列的语句均由框架处理, 如需调整可去数据库中调整
				*
				** UNIQUE: 唯一约束, 支持配置联合唯一约束
				* 
				** DEFAULT_VALUE: 默认值约束
				*** defaultValue: 默认值
				*
				** CHECK: 检查约束
				*** check: 检查约束表达式
				* 
				** FOREIGN_KEY: 外键约束
				*** table: 外键关联的表名
				*** column: 外键关联的列名
				*
				** 约束类型的配置值不区分大小写
			 -->
			<constraint name="" type="" isAutoIncrement="" sequenceName="" defaultValue="" check="" table="" column="">
				<!-- 
					配置相关的列信息, 可配置多组
					* name: 约束的列名, 建议使用全大写, 如果是小写, 框架会自动转成大写
				 -->
				<column name="" />
			</constraint>
		</constraints>
		
		<!-- 
			验证器配置; 即使用DataValidator时是否会验证该列值
		 -->
		<validators>
			<!-- 
				具体验证器配置
				* name: 要验证的列名, 建议使用全大写, 如果是小写, 框架会自动转成大写
				** 如果只配置了name, 后面没有配置任何验证器, 则会被框架忽略
				* 
				* 目前支持的验证器(验证器类型名称区分大小写; 框架会按照验证器的优先级(priority)顺序, 从小到大进行验证):
				*
				* enableNotNull: 是否启用不为null验证器, true/false; 优先级为0
				*
				* enableDataType: 是否启用数据类型验证器(使用列的数据类型进行验证), true/false; 优先级为10
				*
				* 自定义验证器: 实现ValidatorParser接口, 并在这里配置类的全路径
			 -->
			<validator name="NAME" enableNotNull="true" enableNotBlank="true" enableDataType="true" />
		</validators>
	</table>
</mapping-configuration>